#!/usr/bin/python

'''
This script uses a sequence-to-structure map to align rate estimates with structural information.

Author: Benjamin R. Jack
'''

import os
import csv
import warnings
import pandas as pd
import argparse
import textwrap

def main():
    '''
    Make a PDB amino acid to FASTA amino acid sequence map. This map is required
    to align evolutionary rates to positions in the structure.
    '''
    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description='Generate sequence-to-structure map for aligning '
                    'evolutionary rates to a PDB structure.',
        epilog=textwrap.dedent('''\
            This script produces a CSV with the following columns, where each 
            row is a position in the sequence map:

            Column name   Description
            ===================================================================
            fasta_aa        Single letter amino acid for this position 
                            extracted from the FASTA file. Missing values are 
                            positions not present in the original FASTA file.

            pdb_aa          Single letter amino acid for this position extracted
                            from the PDB file. Missing values are positions not 
                            present in the original PDB file.

            chain           PDB chain corresponding to this position.

            pdb_position    Numeric position in sequence extracted from PDB 
                            file. This value corresponds to the numbered 
                            positions generated by `calc_wcn.py` and 
                            `calc_rsa.py`.

            fasta_position  Numeric position in sequence extracted from FASTA 
                            file. This value corresponds to the numbered 
                            positions generated by HyPhy and rate4site.
            
            mismatch        0 if the amino acid extracted from the PDB file 
                            matches the amino acid extracted from the FASTA 
                            file at this position, and 1 if there is a 
                            mismatch. If either amino acid is missing, this 
                            column is assigned a value of 0. 
            ''')
    )
    parser.add_argument('map', metavar='<map>', type=str,
                        help='sequence-to-feature map generated by `make_map.py`')
    parser.add_argument('-r', metavar='<rate files>', type=str,
                        default=None,
                        help='if there are multiple sequences in the FASTA file,map PDB sequence to sequence with this ID (default: use first sequence in FASTA file)')
    parser.add_argument('-f', metavar='<feature files>', type=str,
                        default='A',
                        help='if there are multiple chains in PDB, map FASTA '
                             'sequence to this chain')
    parser.add_argument('-o', metavar='<output prefix>', type=str,
                        help='prefix for output files')
    args = parser.parse_args()
    # Grab PDB name from filename
    pdb_name = os.path.splitext(os.path.basename(args.map))[0]
    # Define output file names
    if args.o is None:
        # If no output prefix given, assign prefix using input filename
        args.o = pdb_name
    output_file = args.o + '.rates_features.csv'

    seq_map = pd.read_csv(args.map)
    rates = pd.read_csv(args.r)
    rsa = pd.read_csv(args.f)

    rates['fasta_position'] = rates.index + 1
    seq_map_rates = seq_map.join(rates.set_index('fasta_position'), on='fasta_position')
    seq_map_rates.reset_index()
    seq_map_rates_rsa = seq_map_rates.join(rsa.set_index(['residue', 'chain']), on=['pdb_position', 'chain'])
    print(seq_map_rates_rsa)

    # Write map to CSV
    # with open(output_map, 'w') as csvfile:
    #     writer = csv.DictWriter(csvfile,
    #                             fieldnames=['fasta_aa', 'pdb_aa', 'chain',
    #                                         'pdb_position', 'fasta_position',
    #                                         'mismatch'],
    #                             extrasaction="ignore")
    #     writer.writeheader()
    #     writer.writerows(output_list)
    # print("Map successfully generated.")


if __name__ == "__main__":
    main()
